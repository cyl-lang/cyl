name: Release

on:
  push:
    tags:
      - "v*.*.*"

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  build-and-release:
    name: Build and Release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: cylc
            asset_name: cylc-linux-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: cylc.exe
            asset_name: cylc-windows-x86_64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: cylc
            asset_name: cylc-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: cylc
            asset_name: cylc-macos-aarch64

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
            compiler/target/
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-

      - name: Install npm dependencies
        run: npm ci

      - name: Run design tests
        run: npm run test:design

      - name: Build release binary
        run: cd compiler && cargo build --release --target ${{ matrix.target }}

      - name: Run compiler tests
        run: cd compiler && cargo test --release --target ${{ matrix.target }}

      - name: Test CLI functionality
        shell: bash
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cd compiler && ./target/${{ matrix.target }}/release/${{ matrix.artifact_name }} --help
            cd compiler && ./target/${{ matrix.target }}/release/${{ matrix.artifact_name }} test
          else
            cd compiler && ./target/${{ matrix.target }}/release/${{ matrix.artifact_name }} --help
            cd compiler && ./target/${{ matrix.target }}/release/${{ matrix.artifact_name }} test
          fi

      - name: Prepare binary for release
        shell: bash
        run: |
          cd compiler
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} ../${{ matrix.asset_name }}
          else
            cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} ../${{ matrix.asset_name }}
            chmod +x ../${{ matrix.asset_name }}
          fi

      - name: Upload Release Asset
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: ${{ matrix.asset_name }}
          tag_name: ${{ github.ref_name }}
          name: Cyl ${{ github.ref_name }}
          generate_release_notes: true
          draft: false
          prerelease: false
