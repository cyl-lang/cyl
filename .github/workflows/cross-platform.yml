name: Cross-Platform Tests

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  schedule:
    # Run daily at 3 AM UTC
    - cron: "0 3 * * *"

env:
  CARGO_TERM_COLOR: always

jobs:
  test-matrix:
    name: Test on ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
        node: ["18", "20"]
        exclude:
          # Reduce matrix size by excluding some combinations
          - os: windows-latest
            rust: beta
          - os: macos-latest
            rust: beta

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust ${{ matrix.rust }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          components: rustfmt, clippy

      - name: Setup Node.js ${{ matrix.node }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: "npm"

      # Install LLVM 14 for each platform
      - name: Install LLVM 14 (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            llvm-14 \
            llvm-14-dev \
            clang-14 \
            libclang-14-dev \
            libclang-common-14-dev
          echo "LLVM_SYS_140_PREFIX=/usr/lib/llvm-14" >> $GITHUB_ENV
          echo "LLVM_CONFIG_PATH=/usr/bin/llvm-config-14" >> $GITHUB_ENV
          echo "LIBCLANG_PATH=/usr/lib/llvm-14/lib" >> $GITHUB_ENV

      - name: Install LLVM 14 (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install llvm@14
          echo "LLVM_SYS_140_PREFIX=$(brew --prefix llvm@14)" >> $GITHUB_ENV
          echo "LLVM_CONFIG_PATH=$(brew --prefix llvm@14)/bin/llvm-config" >> $GITHUB_ENV
          echo "LIBCLANG_PATH=$(brew --prefix llvm@14)/lib" >> $GITHUB_ENV

      - name: Install LLVM 14 (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install llvm --version=14.0.6 --allow-downgrade
          echo "LLVM_SYS_140_PREFIX=C:\Program Files\LLVM" >> $env:GITHUB_ENV
          echo "LLVM_CONFIG_PATH=C:\Program Files\LLVM\bin\llvm-config.exe" >> $env:GITHUB_ENV
          echo "LIBCLANG_PATH=C:\Program Files\LLVM\lib" >> $env:GITHUB_ENV

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
            compiler/target/
          key: ${{ runner.os }}-${{ matrix.rust }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.rust }}-cargo-

      - name: Install npm dependencies
        run: npm ci

      - name: Build Rust compiler
        run: cd compiler && cargo build --verbose

      - name: Run Rust tests
        run: cd compiler && cargo test --verbose

      - name: Build TypeScript (ensure dist exists)
        run: npm run build:design

      - name: Run design tools tests
        run: npm run test:design

      - name: Build release binary
        run: cd compiler && cargo build --release

      - name: Test CLI (Unix)
        if: runner.os != 'Windows'
        run: |
          ./target/release/cylc --help
          ./target/release/cylc test

      - name: Test CLI (Windows)
        if: runner.os == 'Windows'
        run: |
          .\target\release\cylc.exe --help
          .\target\release\cylc.exe test --verbose
          # Print output of hello_world.cyl for debugging
          if (Test-Path .\examples\hello_world.cyl) { Get-Content .\examples\hello_world.cyl }

      - name: Run integration tests
        run: make test

  test-minimum-versions:
    name: Test Minimum Supported Versions
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install minimum Rust version
        uses: dtolnay/rust-toolchain@master
        with:
          # Test with Rust 1.75.0 (stable version with good compatibility)
          toolchain: 1.75.0
          components: rustfmt, clippy

      - name: Setup minimum Node.js version
        uses: actions/setup-node@v4
        with:
          # Test with Node.js 18 (minimum supported for Jest)
          node-version: "18"
          cache: "npm"

      # Install LLVM 14 for minimum version testing
      - name: Install LLVM 14 (Ubuntu)
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            llvm-14 \
            llvm-14-dev \
            clang-14 \
            libclang-14-dev \
            libclang-common-14-dev
          echo "LLVM_SYS_140_PREFIX=/usr/lib/llvm-14" >> $GITHUB_ENV
          echo "LLVM_CONFIG_PATH=/usr/bin/llvm-config-14" >> $GITHUB_ENV
          echo "LIBCLANG_PATH=/usr/lib/llvm-14/lib" >> $GITHUB_ENV

      - name: Install dependencies
        run: npm ci

      - name: Regenerate lock file with minimum Rust version
        run: |
          # Remove existing lock file to regenerate with minimum Cargo version
          rm -f Cargo.lock
          # Generate lock file from workspace
