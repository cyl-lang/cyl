name: CI

on:
  push:
    branches: [master, develop]
  pull_request:
    branches: [master, develop]

env:
  CARGO_TERM_COLOR: always

jobs:
  test-ubuntu:
    name: Test (Ubuntu)
    runs-on: ubuntu-22.04 # Use specific version for more predictable LLVM packages

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y wget software-properties-common apt-transport-https ca-certificates gnupg

      - name: Install LLVM 15 (Method 1 - Ubuntu packages)
        id: install_llvm_ubuntu
        continue-on-error: true
        run: |
          sudo apt-get install -y \
            llvm-15 \
            llvm-15-dev \
            llvm-15-tools \
            llvm-15-runtime \
            clang-15 \
            libclang-15-dev \
            cmake \
            pkg-config \
            build-essential

          # Test if installation worked
          if command -v llvm-config-15 &> /dev/null; then
            echo "success=true" >> $GITHUB_OUTPUT
          else
            echo "success=false" >> $GITHUB_OUTPUT
          fi

      - name: Install LLVM 15 (Method 2 - Official repository)
        if: steps.install_llvm_ubuntu.outputs.success != 'true'
        run: |
          # Add LLVM repository
          wget -qO- https://apt.llvm.org/llvm-snapshot.gpg.key | sudo tee /etc/apt/trusted.gpg.d/apt.llvm.org.asc
          echo "deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-15 main" | sudo tee /etc/apt/sources.list.d/llvm-15.list
          sudo apt-get update

          sudo apt-get install -y \
            llvm-15 \
            llvm-15-dev \
            llvm-15-tools \
            clang-15 \
            libclang-15-dev

      - name: Verify and setup LLVM
        run: |
          # Verify LLVM installation
          llvm-config-15 --version
          llvm-config-15 --prefix
          llvm-config-15 --libdir

          # Create symlinks for compatibility
          sudo ln -sf /usr/bin/llvm-config-15 /usr/bin/llvm-config

          # Set environment variables for this job
          echo "LLVM_SYS_150_PREFIX=$(llvm-config-15 --prefix)" >> $GITHUB_ENV
          echo "LLVM_CONFIG_PATH=/usr/bin/llvm-config-15" >> $GITHUB_ENV
          echo "LLVM_CONFIG=/usr/bin/llvm-config-15" >> $GITHUB_ENV

          # Additional paths
          LLVM_LIBDIR=$(llvm-config-15 --libdir)
          echo "LD_LIBRARY_PATH=${LLVM_LIBDIR}:/usr/lib/x86_64-linux-gnu" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=${LLVM_LIBDIR}/pkgconfig" >> $GITHUB_ENV

          # Verify libraries exist
          echo "Checking for LLVM libraries:"
          find $(llvm-config-15 --libdir) -name "libLLVM*" | head -3

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target/
            compiler/target/
          key: ${{ runner.os }}-cargo-llvm15-${{ hashFiles('**/Cargo.lock') }}

      - name: Debug environment
        working-directory: compiler
        run: |
          echo "=== Environment Variables ==="
          env | grep LLVM || echo "No LLVM env vars found"

          echo "=== LLVM Config Test ==="
          llvm-config-15 --version
          llvm-config-15 --libs core

          echo "=== Library Check ==="
          LLVM_LIBDIR=$(llvm-config-15 --libdir)
          ls -la $LLVM_LIBDIR | grep LLVM | head -5

      - name: Test llvm-sys compilation
        working-directory: compiler
        run: |
          # Test if we can compile just the llvm-sys dependency
          cargo check --package llvm-sys || echo "llvm-sys check failed"

      - name: Run Rust linting
        working-directory: compiler
        run: cargo clippy -- -D warnings

      - name: Run Rust tests
        working-directory: compiler
        run: cargo test

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install npm dependencies
        run: npm ci

      - name: Run TypeScript tests
        run: npm run test:design

      - name: Fallback - Build with environment debugging
        if: failure()
        working-directory: compiler
        run: |
          echo "=== Fallback build attempt ==="
          echo "Attempting to build with maximum debugging..."

          # Try to build with verbose output
          RUST_BACKTRACE=full RUST_LOG=debug cargo build --verbose

          # If that fails, try with specific llvm-sys features
          echo "Trying with no LLVM linking..."
          LLVM_SYS_150_NO_LLVM_LINKING=1 cargo build --verbose || true

          # Show detailed error information
          echo "=== Environment dump ==="
          env | sort

          echo "=== File system check ==="
          find /usr -name "*llvm*" -type f 2>/dev/null | grep -E "(config|lib)" | head -10

      - name: Alternative LLVM setup (if needed)
        if: failure()
        run: |
          echo "=== Attempting alternative LLVM setup ==="

          # Try installing additional LLVM packages
          sudo apt-get install -y \
            llvm-15-runtime \
            libc++-15-dev \
            libc++abi-15-dev \
            libffi-dev \
            zlib1g-dev || true

          # Try to force rebuild cargo cache
          rm -rf ~/.cargo/registry/src/*/llvm-sys* || true

          # Set additional environment variables
          export LLVM_SYS_150_PREFIX=$(llvm-config-15 --prefix)
          export LLVM_SYS_150_FFI_WORKAROUND=1

          # Try again
          cd compiler && cargo clean && cargo check --verbose
