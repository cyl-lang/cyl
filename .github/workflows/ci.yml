name: CI

on:
  push:
    branches: [master, development]
  pull_request:
    branches: [master, development]

env:
  CARGO_TERM_COLOR: always

jobs:
  # Primary job - runs on Ubuntu (cheapest runner)
  test:
    name: Test & Build
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Fast-fail validation before expensive operations
      - name: Quick validation
        run: |
          [ -f "compiler/Cargo.toml" ] || { echo "Missing compiler/Cargo.toml"; exit 1; }
          [ -f "package.json" ] || { echo "Missing package.json"; exit 1; }

      # Aggressive caching for system dependencies
      - name: Cache system packages
        uses: actions/cache@v4
        with:
          path: /var/cache/apt
          key: ${{ runner.os }}-apt-minimal-${{ hashFiles('.github/workflows/ci.yml') }}

      # Install only essential packages
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y llvm-15 llvm-15-dev clang-15 pkg-config

      # Cache Rust dependencies aggressively
      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            compiler/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      # Minimal LLVM setup
      - name: Setup LLVM
        run: |
          echo "LLVM_SYS_150_PREFIX=$(llvm-config-15 --prefix)" >> $GITHUB_ENV

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      # Fast check before full build
      - name: Cargo check
        working-directory: compiler
        run: cargo check

      # Build release binary for integration tests
      - name: Build release binary
        working-directory: compiler
        run: cargo build --release

      # Main Rust workflow with optimizations
      - name: Rust tests and linting
        working-directory: compiler
        run: |
          # Run tests first (fast feedback)
          cargo test

          # Only run clippy on pushes to save PR time
          if [[ "${{ github.event_name }}" == "push" ]]; then
            cargo clippy -- -D warnings
          fi

          # Only build release on master branch
          if [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
            cargo build --release
          fi

      # Cache Node.js dependencies
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      # Conditional TypeScript testing
      - name: TypeScript workflow
        run: |
          npm ci --prefer-offline --no-audit

          # Only run TS tests if relevant files changed or on master
          if [[ "${{ github.ref }}" == "refs/heads/master" ]] || git diff --name-only HEAD~1 2>/dev/null | grep -qE '\.(ts|js|json)$'; then
            npm run test:design
          else
            echo "No TypeScript changes detected, skipping tests"
          fi

  # Windows testing - only when needed
  test-windows:
    name: Windows Test
    runs-on: windows-latest
    # Only run on master pushes or when explicitly requested
    if: |
      github.ref == 'refs/heads/master' ||
      contains(github.event.head_commit.message, '[test-windows]')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Minimal LLVM installation
      - name: Install LLVM (Windows)
        run: |
          choco install llvm --version=15.0.7 -y --no-progress --force
          echo "LLVM_SYS_150_PREFIX=C:\Program Files\LLVM" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust (Windows)
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            compiler/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      # Minimal Windows testing
      - name: Test (Windows)
        working-directory: compiler
        run: |
          cargo check
          cargo test

      - name: Setup Node.js (Windows)
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Test TypeScript (Windows)
        run: |
          npm ci --prefer-offline --no-audit
          npm run test:design
