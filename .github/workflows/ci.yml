name: CI

on:
  push:
    branches: [master, develop]
  pull_request:
    branches: [master, develop]

env:
  CARGO_TERM_COLOR: always

jobs:
  test-rust:
    name: Test Rust Compiler
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install LLVM (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y llvm-15-dev libpolly-15-dev
          echo "LLVM_SYS_150_PREFIX=/usr/lib/llvm-15" >> $GITHUB_ENV

      - name: Install LLVM (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install llvm@15
          echo "LLVM_SYS_150_PREFIX=$(brew --prefix llvm@15)" >> $GITHUB_ENV

      - name: Install LLVM (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          choco install llvm --version=15.0.7
          echo "LLVM_SYS_150_PREFIX=C:\Program Files\LLVM" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
            compiler/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Check Rust formatting
        working-directory: compiler
        run: cargo fmt -- --check

      - name: Run Rust linter
        working-directory: compiler
        run: cargo clippy -- -D warnings

      - name: Build Rust compiler
        working-directory: compiler
        run: cargo build --verbose

      - name: Run Rust tests
        working-directory: compiler
        run: cargo test --verbose

      - name: Build release binary
        working-directory: compiler
        run: cargo build --release

      - name: Test Cyl language tests
        working-directory: compiler
        run: |
          if [ "${{ runner.os }}" = "Windows" ]; then
            ../target/release/cylc.exe test --verbose
          else
            ../target/release/cylc test --verbose
          fi
        shell: bash

  test-design-tools:
    name: Test TypeScript Design Tools
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript type checking
        run: npx tsc --noEmit

      - name: Build TypeScript (for tests)
        run: npm run build:design

      - name: Run design tools tests
        run: npm run test:design

      - name: Validate grammar
        run: npm run grammar:validate

      - name: Generate AST
        run: npm run ast:generate

      - name: Check syntax of examples
        run: |
          npm run syntax:check examples/hello_world.cyl || true
          npm run syntax:check examples/file_processing.cyl || true

  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test-rust, test-design-tools]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install LLVM
        run: |
          sudo apt-get update
          sudo apt-get install -y llvm-15-dev libpolly-15-dev
          echo "LLVM_SYS_150_PREFIX=/usr/lib/llvm-15" >> $GITHUB_ENV

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Setup development environment
        run: make setup

      - name: Run all tests
        run: make test

      - name: Run full validation
        run: make full-check

      - name: Test CLI installation
        run: |
          make install
          cylc --help
          cylc test

      - name: Generate documentation
        run: make docs

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install LLVM
        run: |
          sudo apt-get update
          sudo apt-get install -y llvm-15-dev libpolly-15-dev
          echo "LLVM_SYS_150_PREFIX=/usr/lib/llvm-15" >> $GITHUB_ENV

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run Rust security audit
        run: |
          # Run from workspace root where Cargo.lock is located
          cargo audit --file Cargo.lock

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run npm security audit
        run: npm audit --audit-level moderate

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install LLVM
        run: |
          sudo apt-get update
          sudo apt-get install -y llvm-15-dev libpolly-15-dev
          echo "LLVM_SYS_150_PREFIX=/usr/lib/llvm-15" >> $GITHUB_ENV

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov

      - name: Generate Rust coverage
        run: cd compiler && cargo llvm-cov --all-features --workspace --lcov --output-path ../lcov.info

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./lcov.info
          fail_ci_if_error: false
          verbose: true
