name: Cyl
version: 0.1.0

keywords:
  - value: fn
    type: FunctionDeclaration
    description: Function declaration keyword
  - value: if
    type: IfStatement
    description: Conditional statement
  - value: else
    type: ElseStatement
    description: Alternative branch for conditional
  - value: import
    type: ImportStatement
    description: Module import statement
  - value: return
    type: ReturnStatement
    description: Return from function
  - value: struct
    type: StructDeclaration
    description: Structure type definition
  - value: enum
    type: EnumDeclaration
    description: Enumeration type definition
  - value: match
    type: MatchStatement
    description: Pattern matching statement
  - value: for
    type: ForStatement
    description: For loop statement
  - value: while
    type: WhileStatement
    description: While loop statement
  - value: break
    type: BreakStatement
    description: Break from loop
  - value: continue
    type: ContinueStatement
    description: Continue to next iteration
  - value: try
    type: TryStatement
    description: Exception handling block
  - value: catch
    type: CatchStatement
    description: Exception catching block
  - value: throw
    type: ThrowStatement
    description: Throw an exception
  - value: async
    type: AsyncFunctionDeclaration
    description: Asynchronous function declaration
  - value: await
    type: AwaitExpression
    description: Await asynchronous operation
  - value: void
    type: VoidType
    description: Void return type
  - value: declare
    type: DeclareStatement
    description: Variable declaration (legacy)
  - value: let
    type: DeclareStatement
    description: Variable declaration
  - value: const
    type: DeclareStatement
    description: Constant declaration
  - value: mut
    type: MutabilityModifier
    description: Mutable variable modifier

operators:
  # Arithmetic operators
  - symbol: "+"
    type: binary
    precedence: 6
    associativity: left
    description: Addition operator
  - symbol: "-"
    type: binary
    precedence: 6
    associativity: left
    description: Subtraction operator
  - symbol: "*"
    type: binary
    precedence: 7
    associativity: left
    description: Multiplication operator
  - symbol: "/"
    type: binary
    precedence: 7
    associativity: left
    description: Division operator
  - symbol: "%"
    type: binary
    precedence: 7
    associativity: left
    description: Modulo operator

  # Comparison operators
  - symbol: "=="
    type: binary
    precedence: 4
    associativity: left
    description: Equality comparison
  - symbol: "!="
    type: binary
    precedence: 4
    associativity: left
    description: Inequality comparison
  - symbol: "<"
    type: binary
    precedence: 5
    associativity: left
    description: Less than comparison
  - symbol: "<="
    type: binary
    precedence: 5
    associativity: left
    description: Less than or equal comparison
  - symbol: ">"
    type: binary
    precedence: 5
    associativity: left
    description: Greater than comparison
  - symbol: ">="
    type: binary
    precedence: 5
    associativity: left
    description: Greater than or equal comparison

  # Logical operators
  - symbol: "&&"
    type: binary
    precedence: 3
    associativity: left
    description: Logical AND
  - symbol: "||"
    type: binary
    precedence: 2
    associativity: left
    description: Logical OR
  - symbol: "!"
    type: unary
    precedence: 8
    associativity: right
    description: Logical NOT

  # Bitwise operators
  - symbol: "&"
    type: binary
    precedence: 4
    associativity: left
    description: Bitwise AND
  - symbol: "|"
    type: binary
    precedence: 2
    associativity: left
    description: Bitwise OR
  - symbol: "^"
    type: binary
    precedence: 3
    associativity: left
    description: Bitwise XOR
  - symbol: "<<"
    type: binary
    precedence: 6
    associativity: left
    description: Left bit shift
  - symbol: ">>"
    type: binary
    precedence: 6
    associativity: left
    description: Right bit shift
  - symbol: "~"
    type: unary
    precedence: 8
    associativity: right
    description: Bitwise NOT

  # Assignment and special operators
  - symbol: "="
    type: binary
    precedence: 1
    associativity: right
    description: Assignment operator
  - symbol: "->"
    type: binary
    precedence: 9
    associativity: left
    description: Return type indicator
  - symbol: "."
    type: binary
    precedence: 10
    associativity: left
    description: Member access operator

syntaxRules:
  - name: FunctionDeclaration
    pattern: "[async] fn <identifier> ( [parameters] ) [-> <type>] { <statements> }"
    description: "Function declaration with optional async modifier and return type"
    examples:
      - "fn main() -> void {}"
      - "async fn fetchData() -> string {}"
      - "fn add(a: int, b: int) -> int { return a + b; }"
      - 'fn greet(name: string) { os.print("Hello, " + name); }'

  - name: VariableDeclaration
    pattern: "[let|const] [mut] <identifier> [: <type>] = <expression>"
    description: "Variable declaration with optional type annotation and mutability"
    examples:
      - "let x = 5;"
      - 'const mut name: string = "John";'
      - "let result: int = calculate();"
      - "const PI: float = 3.14159;"

  - name: IfStatement
    pattern: "if <expression> { <statements> } [else <statement>]"
    description: "Conditional statement with optional else clause"
    examples:
      - 'if x > 0 { print("positive"); }'
      - "if condition { doSomething(); } else { doOther(); }"
      - "if x == 0 { return; } else if x > 0 { positive(); } else { negative(); }"

  - name: Import
    pattern: "import <module> [{ <items> }]"
    description: "Module import with optional selective importing"
    examples:
      - "import net;"
      - "import os { print, exit };"
      - "import fs { read, write, exists };"

  - name: StructDeclaration
    pattern: "struct <identifier> [< <type_params> >] { <fields> }"
    description: "Structure type definition with optional generic parameters"
    examples:
      - "struct Point { x: int, y: int }"
      - "struct Person { name: string, age: int, email: string }"
      - "struct Container<T> { value: T, size: int }"

  - name: EnumDeclaration
    pattern: "enum <identifier> { <variants> }"
    description: "Enumeration type definition with variants"
    examples:
      - "enum Color { Red, Green, Blue }"
      - "enum Result<T, E> { Ok(T), Err(E) }"
      - "enum HttpMethod { Get, Post, Put, Delete }"

  - name: MatchStatement
    pattern: "match <expression> { <match_arms> }"
    description: "Pattern matching statement with multiple arms"
    examples:
      - 'match value { 1 => print("one"), 2 => print("two"), _ => print("other") }'
      - "match result { Ok(val) => use(val), Err(e) => handle_error(e) }"

  - name: ForLoop
    pattern: "for <identifier> in <expression> { <statements> }"
    description: "Iterator-based for loop"
    examples:
      - "for item in items { process(item); }"
      - "for i in 0..10 { print(i); }"

  - name: WhileLoop
    pattern: "while <expression> { <statements> }"
    description: "Conditional loop statement"
    examples:
      - "while x > 0 { x = x - 1; }"
      - "while !done { process_next(); }"

types:
  - name: int
    kind: primitive
    description: "Signed 64-bit integer type"
  - name: float
    kind: primitive
    description: "64-bit floating point number type"
  - name: string
    kind: primitive
    description: "UTF-8 encoded string type"
  - name: bool
    kind: primitive
    description: "Boolean type (true/false)"
  - name: char
    kind: primitive
    description: "Unicode character type"
  - name: void
    kind: primitive
    description: "No value type (unit type)"
  - name: "Array<T>"
    kind: generic
    description: "Dynamic array type with element type T"
  - name: "Option<T>"
    kind: generic
    description: "Optional value type that can be Some(T) or None"
  - name: "Result<T, E>"
    kind: generic
    description: "Result type for error handling, either Ok(T) or Err(E)"
  - name: "HashMap<K, V>"
    kind: generic
    description: "Hash map collection with key type K and value type V"
